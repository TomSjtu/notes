{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u6765\u5230\u6211\u7684\u9891\u9053 \u6ca1\u6709\u5b66\u672f\u7684\u6c11\u4e3b\u548c\u601d\u60f3\u7684\u81ea\u7531\uff0c\u79d1\u5b66\u5c31\u4e0d\u80fd\u7e41\u8363\u3002 \u2014\u2014\u2014\u20142003\u7248\u9ad8\u4e00\u7269\u7406\u5fc5\u4fee\u4e00\u8bfe\u672c \u5feb\u901f\u5bfc\u822a Linux Arm \u7f16\u7a0b\u8bed\u8a00 \u4e91\u539f\u751f Tools Others Inspired by: CS\u81ea\u5b66\u6307\u5357 \u4e0a\u6d77\u4ea4\u901a\u5927\u5b66\u751f\u5b58\u624b\u518c \u5b66\u4e60\u65b9\u6cd5","title":"Home"},{"location":"#_1","text":"\u6ca1\u6709\u5b66\u672f\u7684\u6c11\u4e3b\u548c\u601d\u60f3\u7684\u81ea\u7531\uff0c\u79d1\u5b66\u5c31\u4e0d\u80fd\u7e41\u8363\u3002 \u2014\u2014\u2014\u20142003\u7248\u9ad8\u4e00\u7269\u7406\u5fc5\u4fee\u4e00\u8bfe\u672c","title":"\u6b22\u8fce\u6765\u5230\u6211\u7684\u9891\u9053"},{"location":"#_2","text":"Linux Arm \u7f16\u7a0b\u8bed\u8a00 \u4e91\u539f\u751f Tools Others","title":"\u5feb\u901f\u5bfc\u822a"},{"location":"#inspired-by","text":"CS\u81ea\u5b66\u6307\u5357 \u4e0a\u6d77\u4ea4\u901a\u5927\u5b66\u751f\u5b58\u624b\u518c","title":"Inspired by:"},{"location":"#_3","text":"","title":"\u5b66\u4e60\u65b9\u6cd5"},{"location":"arm/","text":"","title":"Index"},{"location":"cloud/","text":"","title":"Index"},{"location":"linux/","text":"\u5feb\u901f\u5165\u95e8","title":"\u5feb\u901f\u5165\u95e8"},{"location":"linux/#_1","text":"","title":"\u5feb\u901f\u5165\u95e8"},{"location":"linux/drivers/chardev/","text":"\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f \u5feb\u901f\u53c2\u8003 #include <linux/types.h> dev_t devID int MAJOR(dev_t dev) int MINOR(dev_t dev) dev_t MKDEV(unsigned int major, unsigned int minor) #include <linux/fs.h> int register_chrdev_region(dev_t first, unsigned int count, char *name) int alloc_chrdev_region(dev_t *dev, unsigned int firstminor, unsigned int count, char *name) void unregister_chrdev_region(dev_t first, unsigned int count) int register_chrdev(unsigned int major, const char *name, struct file_operations *fops) int unregister_chrdev(unsigned int major, const char *name) struct file_operations struct file struct inode #include <linux/cdev.h> struct cdev *cdev_alloc(void) void cdev_init(struct cdev *dev, dev_t num, unsigned int count) void cdev_del(struct cdev *dev) #include <linux/kernel.h> container_of(pointer, type, field) #include <asm/uaccess.h> unsigned long copy_from_user(void *to, const void *from, unsigned long count) unsigned long copy_to_user(void *to, const void *from, unsigned long count) \u8bbe\u5907\u53f7\u521d\u59cb\u5316 \u8bbe\u5907\u53f7\u7684\u6ce8\u518c\u4e0e\u5378\u8f7d(\u4e0d\u63a8\u8350\u7684\u505a\u6cd5) \u6ce8\u518c int register_chrdev(unsigned int major, const char *name, struct file_operations *fops) \u8fd9\u4e2a\u65b9\u6cd5\u5728\u6ce8\u518c\u65f6\u9700\u8981\u624b\u52a8\u6307\u5b9a\u4e3b\u8bbe\u5907\u53f7\uff0c\u56e0\u6b64\u4f60\u5fc5\u987b\u4e8b\u5148\u77e5\u9053\u54ea\u4e2a\u4e3b\u8bbe\u5907\u53f7\u6ca1\u6709\u88ab\u5360\u7528\uff0c\u8fd9\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\u96be\u4ee5\u63a8\u5e7f\uff0c\u5e76\u4e14\u8be5\u51fd\u6570\u8fd8\u4e00\u6b21\u6027\u5360\u7528\u4e86\u4e3b\u8bbe\u5907\u53f7\u4e0b\u7684\u5168\u90e8\u6b21\u8bbe\u5907\u53f7\u3002 \u5378\u8f7d int unregister_chrdev(unsigned int major, const char *name) \u8bbe\u5907\u53f7\u7684\u6ce8\u518c\u4e0e\u5378\u8f7d(\u63a8\u8350\u7684\u505a\u6cd5) \u6ce8\u518c int register_chrdev_region(dev_t first, unsigned count, const char *name) first\u662f\u8981\u5206\u914d\u7684\u8bbe\u5907\u7f16\u53f7\u7684\u8d77\u59cb\u503c\uff0ccount\u662f\u6240\u8bf7\u6c42\u7684\u8fde\u7eed\u8bbe\u5907\u7f16\u53f7\u7684\u4e2a\u6570\uff0cname\u662f\u548c\u8be5\u7f16\u53f7\u8303\u56f4\u5173\u8054\u7684\u8bbe\u5907\u540d\u79f0\uff0c\u5b83\u5c06\u51fa\u73b0\u5728/proc/devices\u548csysfs\u4e2d\u3002 \u5982\u679c\u6211\u4eec\u63d0\u524d\u77e5\u9053\u6240\u9700\u8981\u7684\u8bbe\u5907\u7f16\u53f7\uff0c\u90a3\u4e48\u4f7f\u7528 register_chrdev_region \u5c31\u591f\u4e86\u3002\u4f46\u662f\u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u4e0d\u63a8\u8350\u8fd9\u4e48\u505a\uff0c\u800c\u5e94\u8be5\u4f7f\u7528\u52a8\u6001\u5206\u914d\u51fd\u6570\u3002 int alloc_chrdev_region(dev_t *dev, unsigned firstminor, unsigned count, const char *name) dev\u7528\u6765\u4fdd\u5b58\u4f60\u8981\u7533\u8bf7\u7684\u90a3\u4e2a\u8bbe\u5907\u53f7\u53d8\u91cf\uff0c baseminor\u662f\u6b21\u8bbe\u5907\u53f7\u7684\u8d77\u59cb\u503c\uff0c\u901a\u5e38\u662f0\u3002 \u9a71\u52a8\u7a0b\u5e8f\u5e94\u8be5\u59cb\u7ec8\u4f7f\u7528 alloc_chrdev_region \u800c\u4e0d\u662f register_chrdev_region \u2014\u2014\u2014\u2014\u300aLinux\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f P50 \u300b \u5378\u8f7d \u4e0a\u9762\u4e24\u79cd\u65b9\u6cd5\u6ce8\u518c\u7684\u8bbe\u5907\u7edf\u4e00\u7528\u4ee5\u4e0b\u51fd\u6570\u5378\u8f7d\u3002 void unregister_chrdev_region(dev_t first, unsigned count) \u8be5\u51fd\u6570\u901a\u5e38\u5728\u6e05\u9664\u51fd\u6570\u4e2d\u8c03\u7528\u3002 \u8fd9\u91cc\u6211\u4eec\u7ed9\u51fa\u4e00\u4e2a\u5b8c\u6574\u7684\u793a\u4f8b\uff0c\u5047\u8bbe\u6211\u4eec\u9700\u8981\u6ce8\u518c\u4e00\u4e2a\u540d\u5b57\u4e3a\"test\"\u7684\u8bbe\u5907\u3002 int major; int minor; dev_t devid; if(major){ devid = MKDEV(major, 0); register_chrdev_region(devid, 1, \"test\"); }else { alloc_chrdev_region(&devid, 0, 1, \"test\"); major = MAJOR(devid); minor = MINOR(devid); } \u5bf9\u8bbe\u5907\u53f7\u64cd\u4f5c\u65f6\uff0c\u4f7f\u7528\u5230\u4e86\u4e09\u4e2a\u5b8f\u5b9a\u4e49\uff0c MKDEV , MAJOR , MINOR \u3002\u5f53\u7ed9\u5b9a\u4e3b\u8bbe\u5907\u53f7\u65f6\uff0c\u4f7f\u7528MKDEV\u6765\u6784\u5efa\u5b8c\u6574\u7684devID\uff0c\u6b21\u8bbe\u5907\u53f7\u5219\u4e00\u822c\u9009\u62e90\u3002 \u5b9e\u9645\u5f00\u53d1\u4e2d\uff0cmajor\u53ef\u4ee5\u7528\u4e00\u4e2a\u5b8f\u5b9a\u4e49\u53d6\u4ee3\uff0c\u9ed8\u8ba4\u53d60\uff0c\u5373\u8d70else\u5206\u652f\u9009\u62e9\u201c\u52a8\u6001\u5206\u914d\u201d\u3002\u7528\u6237\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u9ed8\u8ba4\u503c\u5373\u52a8\u6001\u5206\u914d\u7684\u65b9\u5f0f\uff0c\u6216\u8005\u81ea\u5b9a\u4e49\u7279\u5b9a\u7684\u8bbe\u5907\u53f7\u2014\u2014\u53ea\u8981\u5728\u7f16\u8bd1\u524d\u4fee\u6539\u5b8f\u5b9a\u4e49\u4e3a\u8bbe\u5907\u53f7\uff0c\u6216\u8005\u5728insmod\u65f6\u6307\u5b9a\u5373\u53ef\u3002 \u5b57\u7b26\u8bbe\u5907\u7684\u6ce8\u518c \u5185\u6838\u4f7f\u7528 struct cdev \u7ed3\u6784\u6765\u8868\u793a\u5b57\u7b26\u8bbe\u5907\uff0c \u5185\u5b58\u6620\u5c04 \u9a71\u52a8\u5c42\u7684\u64cd\u4f5c \u7531\u4e8eLinux\u6709MMU\u6a21\u5757\uff0c\u56e0\u6b64\u65e0\u6cd5\u8bbf\u95ee\u771f\u5b9e\u7684\u7269\u7406\u5730\u5740\uff0c\u53ea\u80fd\u901a\u8fc7\u865a\u62df\u5730\u5740\u8bbf\u95ee\u786c\u4ef6\u5916\u8bbe\u3002\u6240\u4ee5\u9700\u8981\u6709\u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u5728\u7269\u7406\u5730\u5740\u548c\u865a\u62df\u5730\u5740\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u3002 ioremap(phy_addr, size) \u5176\u4e2daddr\u5c31\u662f\u4f60\u8981\u8bbf\u95ee\u7684\u76f4\u63a5\u7269\u7406\u5730\u5740\uff0csize\u662f\u9700\u8981\u8f6c\u5316\u7684\u5927\u5c0f\uff0c\u8fd4\u56de\u503c\u5c31\u662f\u865a\u62df\u5730\u5740\uff0c\u8fd9\u4e2a\u865a\u62df\u5730\u5740\u6211\u4eec\u9700\u8981\u4e13\u95e8\u7684\u6570\u636e\u7c7b\u578b\u53bb\u63a5\u6536\u3002 static void __iomem *v_addr __iomem \u662f\u4e00\u4e2a\u5b8f\uff0c\u4e3b\u8981\u5c31\u662f\u5728\u786c\u4ef6\u5bc4\u5b58\u5668\u7684\u7269\u7406\u5730\u5740\u548c\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7684\u865a\u62df\u5730\u5740\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u3002 \u6709\u6620\u5c04\u5c31\u4e00\u5b9a\u6709\u53d6\u6d88\u6620\u5c04\uff0c\u7528\u5230\u7684\u662f\u8fd9\u4e48\u4e00\u4e2a\u51fd\u6570\u3002 iounmap(v_addr) \u8fd9\u91cc\u7684\u53c2\u6570\u4e00\u5b9a\u662f\u4f60\u81ea\u5df1\u5b9a\u4e49\u7684\u7528\u6765\u63a5\u6536\u865a\u62df\u5730\u5740\u7684\u90a3\u4e2a\u6307\u9488\uff0c\u6ce8\u610f\u4e0d\u8981\u548c\u7269\u7406\u5730\u5740\u641e\u6df7\u4e86\u3002 I/O\u5185\u5b58\u8bbf\u95ee\u51fd\u6570 \u4f7f\u7528ioremap\u51fd\u6570\u5c06\u5bc4\u5b58\u5668\u7269\u7406\u5730\u5740\u6620\u5c04\u5230\u865a\u62df\u5730\u5740\u540e\uff0cLinux\u63a8\u8350\u4f7f\u7528\u5185\u6838\u81ea\u5e26\u7684\u8bfb\u5199\u64cd\u4f5c\u51fd\u6570\u5bf9\u6620\u5c04\u540e\u7684\u5185\u5b58\u8fdb\u884c\u8bfb\u5199\u3002 \u8bfb\u64cd\u4f5c\u51fd\u6570 u8 readb(v_addr) u16 readw(v_addr) u32 readl(v_addr) \u4e0a\u9762\u4e09\u4e2a\u51fd\u6570\u5206\u522b\u5bf9\u5e948\u4f4d\uff0c16\u4f4d\uff0c32\u4f4d\u7684\u8bfb\u64cd\u4f5c\uff0caddr\u662f\u8981\u8bfb\u53d6\u7684\u5185\u5b58\u5730\u5740\uff0c\u8fd4\u56de\u503c\u662f\u8bfb\u53d6\u5230\u7684\u6570\u636e \u5199\u64cd\u4f5c\u51fd\u6570 void writeb(u8 value, v_addr) void writew(u16 value, v_addr) void writel(u32 value, v_addr) \u540c\u7406\uff0c\u4e0a\u9762\u4e09\u4e2a\u51fd\u6570\u5206\u522b\u5bf9\u5e94\u5404\u81ea\u4f4d\u7684\u8bfb\u64cd\u4f5c\u51fd\u6570\u3002 \u62ff\u5230\u865a\u62df\u5730\u5740\u540e\uff0c\u6211\u4eec\u9700\u8981\u6839\u636e\u624b\u518c\u8bf4\u660e\u5c06\u5176\u4e2d\u7684\u67d0\u51e0\u4f4d\u8fdb\u884c\u914d\u7f6e\uff0c\u5728\u914d\u7f6e\u4e4b\u524d\u5148\u6e05\u9664\u4ee5\u524d\u7684\u914d\u7f6e\u662f\u4e00\u4e2a\u597d\u4e60\u60ef\u3002 val = readl(v_addr); //\u4ece\u5730\u5740\u4e2d\u8bfb\u53d6\u503c\u5199\u5165val val &= ~(3 << 26); //\u5bf9bit26, 27\u4f4d\u6e05\u96f6 val |= 3 << 26; //\u5bf9bit26, 27\u4f4d\u7f6e1 write(val, v_addr); //\u5199\u5165\u865a\u62df\u5730\u5740 \u5e94\u7528\u5c42\u7684\u64cd\u4f5c \u7531\u4e8eLinux\u5185\u6838\u7981\u6b62\u7528\u6237\u6001\u548c\u5185\u6838\u6001\u76f4\u63a5\u8fdb\u884c\u6570\u636e\u4ea4\u4e92\uff0c\u6211\u4eec\u53ea\u80fd\u901a\u8fc7\u5185\u6838\u63d0\u4f9b\u7684API\u51fd\u6570\u8fdb\u884c\u3002 unsigned long copy_from_user(void *to, const void *from, unsigned long count) unsigned long copy_to_user(void *to, const void *from, unsigned long count)","title":"\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f"},{"location":"linux/drivers/chardev/#_1","text":"","title":"\u5b57\u7b26\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f"},{"location":"linux/drivers/chardev/#_2","text":"#include <linux/types.h> dev_t devID int MAJOR(dev_t dev) int MINOR(dev_t dev) dev_t MKDEV(unsigned int major, unsigned int minor) #include <linux/fs.h> int register_chrdev_region(dev_t first, unsigned int count, char *name) int alloc_chrdev_region(dev_t *dev, unsigned int firstminor, unsigned int count, char *name) void unregister_chrdev_region(dev_t first, unsigned int count) int register_chrdev(unsigned int major, const char *name, struct file_operations *fops) int unregister_chrdev(unsigned int major, const char *name) struct file_operations struct file struct inode #include <linux/cdev.h> struct cdev *cdev_alloc(void) void cdev_init(struct cdev *dev, dev_t num, unsigned int count) void cdev_del(struct cdev *dev) #include <linux/kernel.h> container_of(pointer, type, field) #include <asm/uaccess.h> unsigned long copy_from_user(void *to, const void *from, unsigned long count) unsigned long copy_to_user(void *to, const void *from, unsigned long count)","title":"\u5feb\u901f\u53c2\u8003"},{"location":"linux/drivers/chardev/#_3","text":"","title":"\u8bbe\u5907\u53f7\u521d\u59cb\u5316"},{"location":"linux/drivers/chardev/#_4","text":"\u6ce8\u518c int register_chrdev(unsigned int major, const char *name, struct file_operations *fops) \u8fd9\u4e2a\u65b9\u6cd5\u5728\u6ce8\u518c\u65f6\u9700\u8981\u624b\u52a8\u6307\u5b9a\u4e3b\u8bbe\u5907\u53f7\uff0c\u56e0\u6b64\u4f60\u5fc5\u987b\u4e8b\u5148\u77e5\u9053\u54ea\u4e2a\u4e3b\u8bbe\u5907\u53f7\u6ca1\u6709\u88ab\u5360\u7528\uff0c\u8fd9\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\u96be\u4ee5\u63a8\u5e7f\uff0c\u5e76\u4e14\u8be5\u51fd\u6570\u8fd8\u4e00\u6b21\u6027\u5360\u7528\u4e86\u4e3b\u8bbe\u5907\u53f7\u4e0b\u7684\u5168\u90e8\u6b21\u8bbe\u5907\u53f7\u3002 \u5378\u8f7d int unregister_chrdev(unsigned int major, const char *name)","title":"\u8bbe\u5907\u53f7\u7684\u6ce8\u518c\u4e0e\u5378\u8f7d(\u4e0d\u63a8\u8350\u7684\u505a\u6cd5)"},{"location":"linux/drivers/chardev/#_5","text":"\u6ce8\u518c int register_chrdev_region(dev_t first, unsigned count, const char *name) first\u662f\u8981\u5206\u914d\u7684\u8bbe\u5907\u7f16\u53f7\u7684\u8d77\u59cb\u503c\uff0ccount\u662f\u6240\u8bf7\u6c42\u7684\u8fde\u7eed\u8bbe\u5907\u7f16\u53f7\u7684\u4e2a\u6570\uff0cname\u662f\u548c\u8be5\u7f16\u53f7\u8303\u56f4\u5173\u8054\u7684\u8bbe\u5907\u540d\u79f0\uff0c\u5b83\u5c06\u51fa\u73b0\u5728/proc/devices\u548csysfs\u4e2d\u3002 \u5982\u679c\u6211\u4eec\u63d0\u524d\u77e5\u9053\u6240\u9700\u8981\u7684\u8bbe\u5907\u7f16\u53f7\uff0c\u90a3\u4e48\u4f7f\u7528 register_chrdev_region \u5c31\u591f\u4e86\u3002\u4f46\u662f\u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u4e0d\u63a8\u8350\u8fd9\u4e48\u505a\uff0c\u800c\u5e94\u8be5\u4f7f\u7528\u52a8\u6001\u5206\u914d\u51fd\u6570\u3002 int alloc_chrdev_region(dev_t *dev, unsigned firstminor, unsigned count, const char *name) dev\u7528\u6765\u4fdd\u5b58\u4f60\u8981\u7533\u8bf7\u7684\u90a3\u4e2a\u8bbe\u5907\u53f7\u53d8\u91cf\uff0c baseminor\u662f\u6b21\u8bbe\u5907\u53f7\u7684\u8d77\u59cb\u503c\uff0c\u901a\u5e38\u662f0\u3002 \u9a71\u52a8\u7a0b\u5e8f\u5e94\u8be5\u59cb\u7ec8\u4f7f\u7528 alloc_chrdev_region \u800c\u4e0d\u662f register_chrdev_region \u2014\u2014\u2014\u2014\u300aLinux\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f P50 \u300b \u5378\u8f7d \u4e0a\u9762\u4e24\u79cd\u65b9\u6cd5\u6ce8\u518c\u7684\u8bbe\u5907\u7edf\u4e00\u7528\u4ee5\u4e0b\u51fd\u6570\u5378\u8f7d\u3002 void unregister_chrdev_region(dev_t first, unsigned count) \u8be5\u51fd\u6570\u901a\u5e38\u5728\u6e05\u9664\u51fd\u6570\u4e2d\u8c03\u7528\u3002 \u8fd9\u91cc\u6211\u4eec\u7ed9\u51fa\u4e00\u4e2a\u5b8c\u6574\u7684\u793a\u4f8b\uff0c\u5047\u8bbe\u6211\u4eec\u9700\u8981\u6ce8\u518c\u4e00\u4e2a\u540d\u5b57\u4e3a\"test\"\u7684\u8bbe\u5907\u3002 int major; int minor; dev_t devid; if(major){ devid = MKDEV(major, 0); register_chrdev_region(devid, 1, \"test\"); }else { alloc_chrdev_region(&devid, 0, 1, \"test\"); major = MAJOR(devid); minor = MINOR(devid); } \u5bf9\u8bbe\u5907\u53f7\u64cd\u4f5c\u65f6\uff0c\u4f7f\u7528\u5230\u4e86\u4e09\u4e2a\u5b8f\u5b9a\u4e49\uff0c MKDEV , MAJOR , MINOR \u3002\u5f53\u7ed9\u5b9a\u4e3b\u8bbe\u5907\u53f7\u65f6\uff0c\u4f7f\u7528MKDEV\u6765\u6784\u5efa\u5b8c\u6574\u7684devID\uff0c\u6b21\u8bbe\u5907\u53f7\u5219\u4e00\u822c\u9009\u62e90\u3002 \u5b9e\u9645\u5f00\u53d1\u4e2d\uff0cmajor\u53ef\u4ee5\u7528\u4e00\u4e2a\u5b8f\u5b9a\u4e49\u53d6\u4ee3\uff0c\u9ed8\u8ba4\u53d60\uff0c\u5373\u8d70else\u5206\u652f\u9009\u62e9\u201c\u52a8\u6001\u5206\u914d\u201d\u3002\u7528\u6237\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u9ed8\u8ba4\u503c\u5373\u52a8\u6001\u5206\u914d\u7684\u65b9\u5f0f\uff0c\u6216\u8005\u81ea\u5b9a\u4e49\u7279\u5b9a\u7684\u8bbe\u5907\u53f7\u2014\u2014\u53ea\u8981\u5728\u7f16\u8bd1\u524d\u4fee\u6539\u5b8f\u5b9a\u4e49\u4e3a\u8bbe\u5907\u53f7\uff0c\u6216\u8005\u5728insmod\u65f6\u6307\u5b9a\u5373\u53ef\u3002","title":"\u8bbe\u5907\u53f7\u7684\u6ce8\u518c\u4e0e\u5378\u8f7d(\u63a8\u8350\u7684\u505a\u6cd5)"},{"location":"linux/drivers/chardev/#_6","text":"\u5185\u6838\u4f7f\u7528 struct cdev \u7ed3\u6784\u6765\u8868\u793a\u5b57\u7b26\u8bbe\u5907\uff0c","title":"\u5b57\u7b26\u8bbe\u5907\u7684\u6ce8\u518c"},{"location":"linux/drivers/chardev/#_7","text":"","title":"\u5185\u5b58\u6620\u5c04"},{"location":"linux/drivers/chardev/#_8","text":"\u7531\u4e8eLinux\u6709MMU\u6a21\u5757\uff0c\u56e0\u6b64\u65e0\u6cd5\u8bbf\u95ee\u771f\u5b9e\u7684\u7269\u7406\u5730\u5740\uff0c\u53ea\u80fd\u901a\u8fc7\u865a\u62df\u5730\u5740\u8bbf\u95ee\u786c\u4ef6\u5916\u8bbe\u3002\u6240\u4ee5\u9700\u8981\u6709\u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u5728\u7269\u7406\u5730\u5740\u548c\u865a\u62df\u5730\u5740\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u3002 ioremap(phy_addr, size) \u5176\u4e2daddr\u5c31\u662f\u4f60\u8981\u8bbf\u95ee\u7684\u76f4\u63a5\u7269\u7406\u5730\u5740\uff0csize\u662f\u9700\u8981\u8f6c\u5316\u7684\u5927\u5c0f\uff0c\u8fd4\u56de\u503c\u5c31\u662f\u865a\u62df\u5730\u5740\uff0c\u8fd9\u4e2a\u865a\u62df\u5730\u5740\u6211\u4eec\u9700\u8981\u4e13\u95e8\u7684\u6570\u636e\u7c7b\u578b\u53bb\u63a5\u6536\u3002 static void __iomem *v_addr __iomem \u662f\u4e00\u4e2a\u5b8f\uff0c\u4e3b\u8981\u5c31\u662f\u5728\u786c\u4ef6\u5bc4\u5b58\u5668\u7684\u7269\u7406\u5730\u5740\u548c\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7684\u865a\u62df\u5730\u5740\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u3002 \u6709\u6620\u5c04\u5c31\u4e00\u5b9a\u6709\u53d6\u6d88\u6620\u5c04\uff0c\u7528\u5230\u7684\u662f\u8fd9\u4e48\u4e00\u4e2a\u51fd\u6570\u3002 iounmap(v_addr) \u8fd9\u91cc\u7684\u53c2\u6570\u4e00\u5b9a\u662f\u4f60\u81ea\u5df1\u5b9a\u4e49\u7684\u7528\u6765\u63a5\u6536\u865a\u62df\u5730\u5740\u7684\u90a3\u4e2a\u6307\u9488\uff0c\u6ce8\u610f\u4e0d\u8981\u548c\u7269\u7406\u5730\u5740\u641e\u6df7\u4e86\u3002","title":"\u9a71\u52a8\u5c42\u7684\u64cd\u4f5c"},{"location":"linux/drivers/chardev/#io","text":"\u4f7f\u7528ioremap\u51fd\u6570\u5c06\u5bc4\u5b58\u5668\u7269\u7406\u5730\u5740\u6620\u5c04\u5230\u865a\u62df\u5730\u5740\u540e\uff0cLinux\u63a8\u8350\u4f7f\u7528\u5185\u6838\u81ea\u5e26\u7684\u8bfb\u5199\u64cd\u4f5c\u51fd\u6570\u5bf9\u6620\u5c04\u540e\u7684\u5185\u5b58\u8fdb\u884c\u8bfb\u5199\u3002 \u8bfb\u64cd\u4f5c\u51fd\u6570 u8 readb(v_addr) u16 readw(v_addr) u32 readl(v_addr) \u4e0a\u9762\u4e09\u4e2a\u51fd\u6570\u5206\u522b\u5bf9\u5e948\u4f4d\uff0c16\u4f4d\uff0c32\u4f4d\u7684\u8bfb\u64cd\u4f5c\uff0caddr\u662f\u8981\u8bfb\u53d6\u7684\u5185\u5b58\u5730\u5740\uff0c\u8fd4\u56de\u503c\u662f\u8bfb\u53d6\u5230\u7684\u6570\u636e \u5199\u64cd\u4f5c\u51fd\u6570 void writeb(u8 value, v_addr) void writew(u16 value, v_addr) void writel(u32 value, v_addr) \u540c\u7406\uff0c\u4e0a\u9762\u4e09\u4e2a\u51fd\u6570\u5206\u522b\u5bf9\u5e94\u5404\u81ea\u4f4d\u7684\u8bfb\u64cd\u4f5c\u51fd\u6570\u3002 \u62ff\u5230\u865a\u62df\u5730\u5740\u540e\uff0c\u6211\u4eec\u9700\u8981\u6839\u636e\u624b\u518c\u8bf4\u660e\u5c06\u5176\u4e2d\u7684\u67d0\u51e0\u4f4d\u8fdb\u884c\u914d\u7f6e\uff0c\u5728\u914d\u7f6e\u4e4b\u524d\u5148\u6e05\u9664\u4ee5\u524d\u7684\u914d\u7f6e\u662f\u4e00\u4e2a\u597d\u4e60\u60ef\u3002 val = readl(v_addr); //\u4ece\u5730\u5740\u4e2d\u8bfb\u53d6\u503c\u5199\u5165val val &= ~(3 << 26); //\u5bf9bit26, 27\u4f4d\u6e05\u96f6 val |= 3 << 26; //\u5bf9bit26, 27\u4f4d\u7f6e1 write(val, v_addr); //\u5199\u5165\u865a\u62df\u5730\u5740","title":"I/O\u5185\u5b58\u8bbf\u95ee\u51fd\u6570"},{"location":"linux/drivers/chardev/#_9","text":"\u7531\u4e8eLinux\u5185\u6838\u7981\u6b62\u7528\u6237\u6001\u548c\u5185\u6838\u6001\u76f4\u63a5\u8fdb\u884c\u6570\u636e\u4ea4\u4e92\uff0c\u6211\u4eec\u53ea\u80fd\u901a\u8fc7\u5185\u6838\u63d0\u4f9b\u7684API\u51fd\u6570\u8fdb\u884c\u3002 unsigned long copy_from_user(void *to, const void *from, unsigned long count) unsigned long copy_to_user(void *to, const void *from, unsigned long count)","title":"\u5e94\u7528\u5c42\u7684\u64cd\u4f5c"},{"location":"pl/","text":"","title":"Index"},{"location":"tools/","text":"","title":"Index"}]}